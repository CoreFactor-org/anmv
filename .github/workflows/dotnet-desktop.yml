name: Build ANMV projects and Publish NuGet Package

on:
  push:
    branches:
      - main
  pull_request:
    branches:
      - main

jobs:
  build-and-publish:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Setup .NET Core
        uses: actions/setup-dotnet@v4
        with:
          dotnet-version: 9.0.x

      - name: Restore dependencies
        run: dotnet restore

      - name: Build solution
        run: dotnet build --configuration Release

      - name: Run unit tests (non-blocking)
        run: dotnet test --configuration Release --verbosity normal
        continue-on-error: true

      - name: Pack VetCore.Anmv package
        run: dotnet pack VetCore.Anmv/VetCore.Anmv.csproj --configuration Release --output ./nupkg

      - name: Pack VetCore.Anmv.Utils package
        run: dotnet pack VetCore.Anmv.Utils/VetCore.Anmv.Utils.csproj --configuration Release --output ./nupkg

      - name: Get versions from .csproj
        id: get-versions
        run: |
          ANMV_VERSION=$(grep -oPm1 "(?<=<Version>)[^<]+" VetCore.Anmv/VetCore.Anmv.csproj)
          UTILS_VERSION=$(grep -oPm1 "(?<=<Version>)[^<]+" VetCore.Anmv.Utils/VetCore.Anmv.Utils.csproj)
          echo "ANMV_VERSION=${ANMV_VERSION}" >> $GITHUB_ENV
          echo "UTILS_VERSION=${UTILS_VERSION}" >> $GITHUB_ENV

      - name: Get latest version from NuGet for VetCore.Anmv
        id: get-latest-anmv-version
        run: |
          LATEST_ANMV_VERSION=$(curl -s "https://api.nuget.org/v3-flatcontainer/vetcore.anmv/index.json" | jq -r '.versions[-1]')
          echo "LATEST_ANMV_VERSION=${LATEST_ANMV_VERSION}" >> $GITHUB_ENV

      - name: Get latest version from NuGet for VetCore.Anmv.Utils
        id: get-latest-utils-version
        run: |
          LATEST_UTILS_VERSION=$(curl -s "https://api.nuget.org/v3-flatcontainer/vetcore.anmv.utils/index.json" | jq -r '.versions[-1]')
          echo "LATEST_UTILS_VERSION=${LATEST_UTILS_VERSION}" >> $GITHUB_ENV

      - name: Push VetCore.Anmv package to NuGet if needed
        run: |
          if [ "$(printf '%s\n' "${LATEST_ANMV_VERSION}" "${ANMV_VERSION}" | sort -V | tail -n1)" = "${ANMV_VERSION}" ] && [ "${ANMV_VERSION}" != "${LATEST_ANMV_VERSION}" ]; then
            echo "Publishing VetCore.Anmv version ${ANMV_VERSION} (latest on NuGet: ${LATEST_ANMV_VERSION})"
            dotnet nuget push "./nupkg/VetCore.Anmv.${ANMV_VERSION}.nupkg" --api-key ${{ secrets.NUGET_API_KEY }} --source https://api.nuget.org/v3/index.json
          else
            echo "Skipping publication of VetCore.Anmv. Current version (${ANMV_VERSION}) is not greater than the latest on NuGet (${LATEST_ANMV_VERSION})."
          fi

      - name: Push VetCore.Anmv.Utils package to NuGet if needed
        run: |
          if [ "$(printf '%s\n' "${LATEST_UTILS_VERSION}" "${UTILS_VERSION}" | sort -V | tail -n1)" = "${UTILS_VERSION}" ] && [ "${UTILS_VERSION}" != "${LATEST_UTILS_VERSION}" ]; then
            echo "Publishing VetCore.Anmv.Utils version ${UTILS_VERSION} (latest on NuGet: ${LATEST_UTILS_VERSION})"
            dotnet nuget push "./nupkg/VetCore.Anmv.Utils.${UTILS_VERSION}.nupkg" --api-key ${{ secrets.NUGET_API_KEY }} --source https://api.nuget.org/v3/index.json
          else
            echo "Skipping publication of VetCore.Anmv.Utils. Current version (${UTILS_VERSION}) is not greater than the latest on NuGet (${LATEST_UTILS_VERSION})."
          fi
